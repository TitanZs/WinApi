#include <ctime>
#include <tchar.h>
#include <Windows.h>
LRESULT CALLBACK WindowProc(HWND, UINT, WPARAM, LPARAM);
int w = GetSystemMetrics(SM_CXSCREEN);
int h = GetSystemMetrics(SM_CYSCREEN);
int w_w = (w / 2) - 250;
int h_w = (h / 2) - 250;
TCHAR szClassWindow[] = L"Каркасное приложение";	// имя класса окна

INT WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR lpszCmdLine, int nCmdShow)
{

	WNDCLASSEX wcl;
	wcl.cbSize = sizeof(wcl);	
	wcl.style = CS_HREDRAW | CS_VREDRAW;	
	wcl.lpfnWndProc = WindowProc;	// адрес оконной процедуры, указатель на функцию WindowProc
	wcl.cbClsExtra = 0;		// используется Windows 
	wcl.cbWndExtra = 0; 	// используется Windows 
	wcl.hInstance = hInst;	// дескриптор данного приложения
	wcl.hIcon = LoadIcon(NULL, IDI_APPLICATION);	// загрузка стандартной иконки (посмотреть список иконок!)
	wcl.hCursor = LoadCursor(NULL, IDC_ARROW);	// загрузка стандартного курсора (посмотреть список курсоров!)
	wcl.hbrBackground = CreateSolidBrush(RGB(200, 200, 200));
	wcl.lpszMenuName = NULL;	// приложение не содержит меню
	wcl.lpszClassName = szClassWindow;	// имя класса окна
	wcl.hIconSm = NULL;	// отсутствие маленькой иконки для связи с классом окна


	if (!RegisterClassEx(&wcl))
		return 0; // при неудачной регистрации - выход

	HWND hWnd = CreateWindowEx(
		0,		// расширенный стиль окна (WS_EX_ACCEPTFILES, WS_EX_CLIENTEDGE)
		szClassWindow,	//имя класса окна
		L"Первое окно", // заголовок окна
		WS_OVERLAPPEDWINDOW, // стиль окна (WS_HSCROLL | WS_VSCROLL)
		50,
		50,
		200, 
		200,
		NULL,			// дескриптор родительского окна (HWND_DESKTOP)
		NULL,			// дескриптор меню окна
		hInst,		// идентификатор приложения, создавшего окно
		NULL);		// указатель на область данных приложения

	ShowWindow(hWnd, nCmdShow);
	MoveWindow(hWnd, w_w, h_w, 500, 500, true);
	UpdateWindow(hWnd); // перерисовка окна
	SetWindowText(hWnd, L"Привет мир");
	
	MSG lpMsg;
	while (GetMessage(&lpMsg, NULL, 0, 0)) // получение очередного сообщения из очереди сообщений (пока не придёт WM_QUIT)
	{ 
		TranslateMessage(&lpMsg);	
		DispatchMessage(&lpMsg);	
	} 
	return lpMsg.wParam;
}

LRESULT CALLBACK WindowProc(HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam)
{
	switch (uMessage)
	{
	case WM_KEYDOWN:
		if (wParam == VK_RETURN)
		{
			SetTimer(hWnd, 1, 1, NULL);
		}
		else if (wParam == VK_ESCAPE)
		{			
			KillTimer(hWnd,1);
		}
		break;
	case WM_TIMER:
			
		MoveWindow(hWnd, w_w, h_w, 500, 500, true);
		if (w_w >= 0 && h_w >= 0 && w_w < 10)
			h_w -= 10;
		else if (w_w < w && h_w < 10 && w_w+500 < w)
			w_w += 10;
		else if (w_w + 500 > w-10 && h_w+500 < h  )
			h_w += 10;
		else if (w_w + 500 > 0 )
			w_w -= 10;
		
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, uMessage, wParam, lParam);
	}
	return 0;
}
