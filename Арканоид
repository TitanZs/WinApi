#include <windows.h>
#include <tchar.h>
#include <time.h>

const int MV_LEFTUP = 0;
const int MV_LEFTDOWN = 1;
const int MV_RIGHTUP = 2;
const int MV_RIGHTDOWN = 3;
const int BALL_SIZE = 150;

LRESULT CALLBACK WindowProc(HWND, UINT, WPARAM, LPARAM);

TCHAR szClassWindow[] = TEXT("Каркасное приложение");
bool started = false;
int direct = -1;
int val = 1;

int WINAPI _tWinMain(HINSTANCE hInst, HINSTANCE hPrevInst,
	LPTSTR lpszCmdLine, int nCmdShow)
{
	srand(time(NULL));
	HWND hWnd;
	MSG Msg;
	WNDCLASSEX wcl;
	wcl.cbSize = sizeof(wcl);
	wcl.style = CS_HREDRAW | CS_VREDRAW;
	wcl.lpfnWndProc = WindowProc;
	wcl.cbClsExtra = 0;
	wcl.cbWndExtra = 0;
	wcl.hInstance = hInst;
	wcl.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wcl.hCursor = LoadCursor(NULL, IDC_ARROW);
	wcl.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	wcl.lpszMenuName = NULL;
	wcl.lpszClassName = szClassWindow;
	wcl.hIconSm = NULL;

	if (!RegisterClassEx(&wcl))
		return 0;

	hWnd = CreateWindowEx(0, szClassWindow, TEXT("Движущееся окно"), WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, NULL, NULL, hInst, NULL);

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	HDC hDC;
	wchar_t ch[] = (L"Нажмите Enter для карусели");
	hDC = ::GetDC(hWnd);
	::TextOut(hDC, 200, 75, ch, wcslen(ch));
	::ReleaseDC(hWnd, hDC);

	while (GetMessage(&Msg, NULL, 0, 0))
	{
		TranslateMessage(&Msg);
		DispatchMessage(&Msg);
	}
	return Msg.wParam;
}

VOID CALLBACK MoveW(HWND hwnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime)
{
	if (!started)
	{
		int x = 500;
		int y = 500;
		direct = 1;
		MoveWindow(hwnd, x, y, BALL_SIZE, BALL_SIZE, 1);
		started = true;
	}
	else
	{
		RECT r;
		GetWindowRect(hwnd, &r);
		switch (direct)
		{
		case MV_LEFTUP:
		{
						  if ((r.left < val) && (r.top < val)) direct = MV_RIGHTDOWN;
						  else if (r.left < val) direct = MV_RIGHTUP;
						  else if (r.top < val) direct = MV_LEFTDOWN;
						  else direct = MV_LEFTUP;
						  MoveWindow(hwnd, r.left -= val, r.top -= val, BALL_SIZE, BALL_SIZE, 1);
						  break;
		}
		case MV_LEFTDOWN:
		{
							if ((r.left < val) && (r.bottom > GetSystemMetrics(SM_CYSCREEN) - val)) direct = MV_RIGHTUP;
							else if (r.left < val) direct = MV_RIGHTDOWN;
							else if (r.bottom > GetSystemMetrics(SM_CYSCREEN) - val) direct = MV_LEFTUP;
							else direct = MV_LEFTDOWN;
							MoveWindow(hwnd, r.left -= val, r.top += val, BALL_SIZE, BALL_SIZE, 1);
							break;
		}
		case MV_RIGHTUP:
		{
						   if ((r.right > GetSystemMetrics(SM_CXSCREEN) - val) && (r.top < val)) direct = MV_LEFTDOWN;
						   else if (r.right > GetSystemMetrics(SM_CXSCREEN) - val) direct = MV_LEFTUP;
						   else if (r.top < val) direct = MV_RIGHTDOWN;
						   else direct = MV_RIGHTUP;
						   MoveWindow(hwnd, r.left += val, r.top -= val, BALL_SIZE, BALL_SIZE, 1);
						   break;
		}
		case MV_RIGHTDOWN:
		{
							 if ((r.right > GetSystemMetrics(SM_CXSCREEN) - val) && (r.bottom > GetSystemMetrics(SM_CYSCREEN) - val)) direct = MV_LEFTUP;
							 else if (r.right > GetSystemMetrics(SM_CXSCREEN) - val) direct = MV_LEFTDOWN;
							 else if (r.bottom > GetSystemMetrics(SM_CYSCREEN) - val) direct = MV_RIGHTUP;
							 else direct = MV_RIGHTDOWN;
							 MoveWindow(hwnd, r.left += val, r.top += val, BALL_SIZE, BALL_SIZE, 1);
							 break;
		}

		}

	}
}

LRESULT CALLBACK WindowProc(HWND hWnd, UINT message, WPARAM wParam,
	LPARAM lParam)
{
	switch (message)
	{
	case WM_DESTROY:
		PostQuitMessage(0);
		break;

	case WM_KEYDOWN:
		if (wParam == VK_UP)
		{
			val += 2;
		}
		if (wParam == VK_DOWN)
		{
			val -= 2;
		}
		if (wParam == VK_RETURN)
			SetTimer(hWnd, 1, 10, MoveW);
		else if (wParam == VK_ESCAPE)
		{
			KillTimer(hWnd, 1);
			started = false;
			direct = 3;
		}
		break;

	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}
