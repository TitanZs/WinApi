#include <windows.h>
#include <ctime>
// прототип оконной процедуры, которая занимается обработкой сообщений
LRESULT CALLBACK WindowProc(HWND, UINT, WPARAM, LPARAM);
TCHAR szClassWindow[] = L"Каркасное приложение";	// имя класса окна
int w = GetSystemMetrics(SM_CXSCREEN) / 2 - 100;
int h = GetSystemMetrics(SM_CYSCREEN) / 2 - 100;
int x = w, y = h;
// точка входа в приложение
INT WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR lpszCmdLine, int nCmdShow)
{
	// 1. определение класса окна
	WNDCLASSEX wcl;
	wcl.cbSize = sizeof(wcl);	// размер в байтах структуры WNDCLASSEX
	// перерисовать всё окно, если изменён размер по горизонтали или по вертикали
	wcl.style = CS_HREDRAW | CS_VREDRAW;	// CS (Class Style) - стиль класса окна (CS_DBLCLKS!)
	wcl.lpfnWndProc = WindowProc;	// адрес оконной процедуры, указатель на функцию WindowProc
	wcl.cbClsExtra = 0;		// используется Windows 
	wcl.cbWndExtra = 0; 	// используется Windows 
	wcl.hInstance = hInst;	// дескриптор данного приложения

	wcl.hIcon = LoadIcon(NULL, IDI_APPLICATION);	// загрузка стандартной иконки (посмотреть список иконок!)


	wcl.hCursor = LoadCursor(NULL, IDC_ARROW);	// загрузка стандартного курсора (посмотреть список курсоров!)
	// HCURSOR hCursor=LoadCursorFromFile(L"C:\\1.ani");
	wcl.hbrBackground = CreateSolidBrush(RGB(255, 120, 0));
	wcl.lpszMenuName = NULL;	// приложение не содержит меню
	wcl.lpszClassName = szClassWindow;	// имя класса окна
	wcl.hIconSm = NULL;	// отсутствие маленькой иконки для связи с классом окна

	// 2. регистрация класса окна
	if (!RegisterClassEx(&wcl))
		return 0; // при неудачной регистрации - выход

	// 3. создание окна
	// создается окно и переменной hWnd присваивается дескриптор окна

	HWND hWnd = CreateWindowEx(
		0,		// расширенный стиль окна (WS_EX_ACCEPTFILES, WS_EX_CLIENTEDGE)
		szClassWindow,	//имя класса окна
		L"Первое окно", // заголовок окна
		WS_OVERLAPPEDWINDOW, // стиль окна (WS_HSCROLL | WS_VSCROLL)
		// WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX,
		// заголовок, рамка, позволяющая менять размеры, системное меню, кнопки развёртывания и свёртывания окна
		500, 500, 200, 200,
		NULL,			// дескриптор родительского окна (HWND_DESKTOP)
		NULL,			// дескриптор меню окна
		hInst,		// идентификатор приложения, создавшего окно
		NULL);		// указатель на область данных приложения

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd); // перерисовка окна

	MSG lpMsg;
	while (GetMessage(&lpMsg, NULL, 0, 0)) // получение очередного сообщения из очереди сообщений (пока не придёт WM_QUIT)
	{ // выбирать любые сообщения из любых приложений
		TranslateMessage(&lpMsg);	// трансляция сообщения (потребуется для работы с клавиатурой)
		DispatchMessage(&lpMsg);	// диспетчеризация сообщений
	} // отправка сообщения оконной процедуре
	return lpMsg.wParam;
}

// функция вызывается ОС, не программой!
LRESULT CALLBACK WindowProc(HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam)
{
	//HWND hw;
	//hw = FindWindow(L"CalcFrame", L"Калькулятор");
	int val = 0;
	switch (uMessage)
	{
	case WM_KEYDOWN:
		switch (wParam)
		{
		case VK_LEFT:
			x -= 10;
			break;
		case VK_UP:
			y -= 10;
			break;
		case VK_RIGHT:
			x += 10;
			break;
		case VK_DOWN:
			y += 10;
			break;
		case VK_ESCAPE:
			x = 0; y = 0;
			break;
		case VK_SPACE:
			x = w, y = h;
			break;
		case 13:
			ShowWindow(hWnd, SW_SHOWMAXIMIZED);
			break;
		}
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, uMessage, wParam, lParam);
	}
	if (wParam != 13)	MoveWindow(hWnd, x, y, 200, 200, true);

	return 0;
}
